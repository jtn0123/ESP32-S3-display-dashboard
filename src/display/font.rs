// Simple 5x7 font system for embedded displays

use super::Color;

// 5x7 font data for ASCII characters 32-127
// Each byte represents a column of pixels (5 columns per character)
pub const FONT_5X7: &[[u8; 5]] = &[
    [0x00, 0x00, 0x00, 0x00, 0x00], // 32 - Space
    [0x00, 0x00, 0x5F, 0x00, 0x00], // 33 - !
    [0x00, 0x07, 0x00, 0x07, 0x00], // 34 - "
    [0x14, 0x7F, 0x14, 0x7F, 0x14], // 35 - #
    [0x24, 0x2A, 0x7F, 0x2A, 0x12], // 36 - $
    [0x23, 0x13, 0x08, 0x64, 0x62], // 37 - %
    [0x36, 0x49, 0x56, 0x20, 0x50], // 38 - &
    [0x00, 0x08, 0x07, 0x03, 0x00], // 39 - '
    [0x00, 0x1C, 0x22, 0x41, 0x00], // 40 - (
    [0x00, 0x41, 0x22, 0x1C, 0x00], // 41 - )
    [0x2A, 0x1C, 0x7F, 0x1C, 0x2A], // 42 - *
    [0x08, 0x08, 0x3E, 0x08, 0x08], // 43 - +
    [0x00, 0x80, 0x70, 0x30, 0x00], // 44 - ,
    [0x08, 0x08, 0x08, 0x08, 0x08], // 45 - -
    [0x00, 0x00, 0x60, 0x60, 0x00], // 46 - .
    [0x20, 0x10, 0x08, 0x04, 0x02], // 47 - /
    [0x3E, 0x51, 0x49, 0x45, 0x3E], // 48 - 0
    [0x00, 0x42, 0x7F, 0x40, 0x00], // 49 - 1
    [0x72, 0x49, 0x49, 0x49, 0x46], // 50 - 2
    [0x21, 0x41, 0x49, 0x4D, 0x33], // 51 - 3
    [0x18, 0x14, 0x12, 0x7F, 0x10], // 52 - 4
    [0x27, 0x45, 0x45, 0x45, 0x39], // 53 - 5
    [0x3C, 0x4A, 0x49, 0x49, 0x31], // 54 - 6
    [0x41, 0x21, 0x11, 0x09, 0x07], // 55 - 7
    [0x36, 0x49, 0x49, 0x49, 0x36], // 56 - 8
    [0x46, 0x49, 0x49, 0x29, 0x1E], // 57 - 9
    [0x00, 0x00, 0x14, 0x00, 0x00], // 58 - :
    [0x00, 0x40, 0x34, 0x00, 0x00], // 59 - ;
    [0x00, 0x08, 0x14, 0x22, 0x41], // 60 - <
    [0x14, 0x14, 0x14, 0x14, 0x14], // 61 - =
    [0x00, 0x41, 0x22, 0x14, 0x08], // 62 - >
    [0x02, 0x01, 0x59, 0x09, 0x06], // 63 - ?
    [0x3E, 0x41, 0x5D, 0x59, 0x4E], // 64 - @
    [0x7C, 0x12, 0x11, 0x12, 0x7C], // 65 - A
    [0x7F, 0x49, 0x49, 0x49, 0x36], // 66 - B
    [0x3E, 0x41, 0x41, 0x41, 0x22], // 67 - C
    [0x7F, 0x41, 0x41, 0x41, 0x3E], // 68 - D
    [0x7F, 0x49, 0x49, 0x49, 0x41], // 69 - E
    [0x7F, 0x09, 0x09, 0x09, 0x01], // 70 - F
    [0x3E, 0x41, 0x41, 0x51, 0x73], // 71 - G
    [0x7F, 0x08, 0x08, 0x08, 0x7F], // 72 - H
    [0x00, 0x41, 0x7F, 0x41, 0x00], // 73 - I
    [0x20, 0x40, 0x41, 0x3F, 0x01], // 74 - J
    [0x7F, 0x08, 0x14, 0x22, 0x41], // 75 - K
    [0x7F, 0x40, 0x40, 0x40, 0x40], // 76 - L
    [0x7F, 0x02, 0x1C, 0x02, 0x7F], // 77 - M
    [0x7F, 0x04, 0x08, 0x10, 0x7F], // 78 - N
    [0x3E, 0x41, 0x41, 0x41, 0x3E], // 79 - O
    [0x7F, 0x09, 0x09, 0x09, 0x06], // 80 - P
    [0x3E, 0x41, 0x51, 0x21, 0x5E], // 81 - Q
    [0x7F, 0x09, 0x19, 0x29, 0x46], // 82 - R
    [0x26, 0x49, 0x49, 0x49, 0x32], // 83 - S
    [0x03, 0x01, 0x7F, 0x01, 0x03], // 84 - T
    [0x3F, 0x40, 0x40, 0x40, 0x3F], // 85 - U
    [0x1F, 0x20, 0x40, 0x20, 0x1F], // 86 - V
    [0x3F, 0x40, 0x38, 0x40, 0x3F], // 87 - W
    [0x63, 0x14, 0x08, 0x14, 0x63], // 88 - X
    [0x03, 0x04, 0x78, 0x04, 0x03], // 89 - Y
    [0x61, 0x59, 0x49, 0x4D, 0x43], // 90 - Z
    [0x00, 0x7F, 0x41, 0x41, 0x41], // 91 - [
    [0x02, 0x04, 0x08, 0x10, 0x20], // 92 - backslash
    [0x00, 0x41, 0x41, 0x41, 0x7F], // 93 - ]
    [0x04, 0x02, 0x01, 0x02, 0x04], // 94 - ^
    [0x40, 0x40, 0x40, 0x40, 0x40], // 95 - _
    [0x00, 0x03, 0x07, 0x08, 0x00], // 96 - `
    [0x20, 0x54, 0x54, 0x78, 0x40], // 97 - a
    [0x7F, 0x28, 0x44, 0x44, 0x38], // 98 - b
    [0x38, 0x44, 0x44, 0x44, 0x28], // 99 - c
    [0x38, 0x44, 0x44, 0x28, 0x7F], // 100 - d
    [0x38, 0x54, 0x54, 0x54, 0x18], // 101 - e
    [0x00, 0x08, 0x7E, 0x09, 0x02], // 102 - f
    [0x18, 0xA4, 0xA4, 0x9C, 0x78], // 103 - g
    [0x7F, 0x08, 0x04, 0x04, 0x78], // 104 - h
    [0x00, 0x44, 0x7D, 0x40, 0x00], // 105 - i
    [0x20, 0x40, 0x40, 0x3D, 0x00], // 106 - j
    [0x7F, 0x10, 0x28, 0x44, 0x00], // 107 - k
    [0x00, 0x41, 0x7F, 0x40, 0x00], // 108 - l
    [0x7C, 0x04, 0x78, 0x04, 0x78], // 109 - m
    [0x7C, 0x08, 0x04, 0x04, 0x78], // 110 - n
    [0x38, 0x44, 0x44, 0x44, 0x38], // 111 - o
    [0xFC, 0x18, 0x24, 0x24, 0x18], // 112 - p
    [0x18, 0x24, 0x24, 0x18, 0xFC], // 113 - q
    [0x7C, 0x08, 0x04, 0x04, 0x08], // 114 - r
    [0x48, 0x54, 0x54, 0x54, 0x24], // 115 - s
    [0x04, 0x04, 0x3F, 0x44, 0x24], // 116 - t
    [0x3C, 0x40, 0x40, 0x20, 0x7C], // 117 - u
    [0x1C, 0x20, 0x40, 0x20, 0x1C], // 118 - v
    [0x3C, 0x40, 0x30, 0x40, 0x3C], // 119 - w
    [0x44, 0x28, 0x10, 0x28, 0x44], // 120 - x
    [0x4C, 0x90, 0x90, 0x90, 0x7C], // 121 - y
    [0x44, 0x64, 0x54, 0x4C, 0x44], // 122 - z
    [0x00, 0x08, 0x36, 0x41, 0x00], // 123 - {
    [0x00, 0x00, 0x77, 0x00, 0x00], // 124 - |
    [0x00, 0x41, 0x36, 0x08, 0x00], // 125 - }
    [0x02, 0x01, 0x02, 0x04, 0x02], // 126 - ~
];

pub struct Font5x7;

impl Font5x7 {
    pub const WIDTH: u16 = 5;
    pub const HEIGHT: u16 = 7;
    pub const SPACING: u16 = 1;
    
    pub fn get_char_width(ch: char) -> u16 {
        match ch {
            ' ' => 3,  // Narrower space
            '!' | '.' | ',' | ':' | ';' | '\'' | '|' => 2,  // Narrow characters
            _ => Self::WIDTH,
        }
    }
    
    pub fn get_string_width(text: &str) -> u16 {
        text.chars()
            .map(|ch| Self::get_char_width(ch) + Self::SPACING)
            .sum::<u16>()
            .saturating_sub(Self::SPACING)  // Remove last spacing
    }
    
    pub fn get_char_data(ch: char) -> Option<&'static [u8; 5]> {
        let index = ch as usize;
        if index >= 32 && index < 127 {
            Some(&FONT_5X7[index - 32])
        } else {
            None  // Character not in font
        }
    }
}

// Extension trait for Display
pub trait FontRenderer {
    fn draw_char_5x7(&mut self, x: u16, y: u16, ch: char, color: Color);
    fn draw_text_5x7(&mut self, x: u16, y: u16, text: &str, color: Color);
    fn draw_text_centered_5x7(&mut self, x: u16, y: u16, width: u16, text: &str, color: Color);
}

impl FontRenderer for super::Display {
    fn draw_char_5x7(&mut self, x: u16, y: u16, ch: char, color: Color) {
        if let Some(char_data) = Font5x7::get_char_data(ch) {
            for (col, &column_data) in char_data.iter().enumerate() {
                for row in 0..7 {
                    if column_data & (1 << row) != 0 {
                        self.set_pixel(x + col as u16, y + row, color);
                    }
                }
            }
        }
    }
    
    fn draw_text_5x7(&mut self, x: u16, y: u16, text: &str, color: Color) {
        let mut cursor_x = x;
        
        for ch in text.chars() {
            self.draw_char_5x7(cursor_x, y, ch, color);
            cursor_x += Font5x7::get_char_width(ch) + Font5x7::SPACING;
        }
    }
    
    fn draw_text_centered_5x7(&mut self, x: u16, y: u16, width: u16, text: &str, color: Color) {
        let text_width = Font5x7::get_string_width(text);
        if text_width < width {
            let offset_x = (width - text_width) / 2;
            self.draw_text_5x7(x + offset_x, y, text, color);
        } else {
            self.draw_text_5x7(x, y, text, color);
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_string_width_calculation() {
        assert_eq!(Font5x7::get_string_width("Hello"), 25);  // 5 chars * 5 width + 4 spacing
        assert_eq!(Font5x7::get_string_width("Hi!"), 12);    // H(5) + space(1) + i(5) + space(1) + !(2)
        assert_eq!(Font5x7::get_string_width(""), 0);
    }
    
    #[test]
    fn test_char_data_bounds() {
        assert!(Font5x7::get_char_data(' ').is_some());
        assert!(Font5x7::get_char_data('~').is_some());
        assert!(Font5x7::get_char_data('\0').is_none());
        assert!(Font5x7::get_char_data('\x7F').is_none());
    }
}