// Alternative OTA Implementation for ESP32-S3
// Add this after the includes section

#include <ESPmDNS.h>  // Add this include

// Modified OTA setup function
void setupOTA() {
  if (!WiFi.isConnected()) {
    Serial.println("OTA: WiFi not connected, skipping OTA setup");
    return;
  }
  
  // CRITICAL: Start mDNS first for ESP32-S3
  if (!MDNS.begin("esp32-dashboard")) {
    Serial.println("Error starting mDNS");
  } else {
    Serial.println("mDNS responder started");
  }
  
  // Add a delay for network stack to stabilize
  delay(500);
  
  // Set hostname (customize as needed)
  ArduinoOTA.setHostname("esp32-dashboard");
  
  // Set OTA port explicitly
  ArduinoOTA.setPort(3232);
  
  // IMPORTANT: For ESP32-S3, we need to set the partition label
  ArduinoOTA.setPartitionLabel(NULL);  // Use default partition
  
  // Set password for OTA updates (optional but recommended)
  // ArduinoOTA.setPassword("your-ota-password");
  
  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else {  // U_SPIFFS
      type = "filesystem";
    }
    Serial.println("OTA: Start updating " + type);
    otaInProgress = true;
    
    // Clear screen and show OTA message
    fillScreen(BLACK);
    drawTextLabel(50, 80, "OTA UPDATE", TEXT_PRIMARY);
    drawTextLabel(50, 120, "IN PROGRESS...", TEXT_SECONDARY);
  });
  
  ArduinoOTA.onEnd([]() {
    Serial.println("\nOTA: Update complete!");
    otaInProgress = false;
    fillScreen(BLACK);
    drawTextLabel(50, 80, "UPDATE COMPLETE", GREEN);
    drawTextLabel(50, 120, "RESTARTING...", TEXT_SECONDARY);
    delay(1000);
  });
  
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    int percentage = (progress / (total / 100));
    Serial.printf("OTA Progress: %u%%\r", percentage);
    otaProgress = percentage;
    
    // Draw progress bar
    fillRect(40, 150, 220, 20, BORDER_COLOR);  // Background
    fillRect(42, 152, (216 * percentage) / 100, 16, PRIMARY_GREEN);  // Progress
    
    // Draw percentage text
    char buf[10];
    snprintf(buf, sizeof(buf), "%d%%", percentage);
    drawTextLabel(130, 180, buf, TEXT_PRIMARY);
  });
  
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("OTA Error[%u]: ", error);
    String errorMsg = "Unknown";
    if (error == OTA_AUTH_ERROR) errorMsg = "Auth Failed";
    else if (error == OTA_BEGIN_ERROR) errorMsg = "Begin Failed";
    else if (error == OTA_CONNECT_ERROR) errorMsg = "Connect Failed";
    else if (error == OTA_RECEIVE_ERROR) errorMsg = "Receive Failed";
    else if (error == OTA_END_ERROR) errorMsg = "End Failed";
    
    Serial.println(errorMsg);
    otaInProgress = false;
    
    // Show error on screen
    fillScreen(BLACK);
    drawTextLabel(50, 80, "OTA ERROR", PRIMARY_RED);
    drawTextLabel(50, 120, errorMsg.c_str(), TEXT_SECONDARY);
    delay(3000);
  });
  
  // CRITICAL: For ESP32-S3, we need to handle this differently
  ArduinoOTA.begin();
  
  // Add mDNS service advertising
  MDNS.addService("arduino", "tcp", 3232);
  
  Serial.println("OTA: Ready for updates");
  Serial.print("OTA: Hostname: ");
  Serial.println(ArduinoOTA.getHostname());
  Serial.print("OTA: IP Address: ");
  Serial.println(WiFi.localIP());
  Serial.println("OTA: Port: 3232");
  
  // Test if OTA is really running
  delay(100);
  Serial.println("OTA: Service started successfully");
}