--- a/src/main.rs
+++ b/src/main.rs
@@ -367,25 +367,19 @@
         
         // Start web server after telnet so errors are logged
         let web_server = if network_manager.is_connected() {
-            log::info!("Network is connected, starting web server...");
-            match network::web_server::WebConfigServer::new_with_ota(config.clone(), ota_manager.clone()) {
-                Ok(server) => {
-                    log::info!("Web server started successfully on port 80");
-                    Some(server)
-                }
-                Err(e) => {
-                    let error_msg = format!("Web server failed: {}", e);
-                    log::error!("Failed to start web server: {:?}", e);
-                    log::error!("Web server error details: {}", e);
-                    log::error!("This error prevents OTA updates from working");
-                    
-                    // Store error globally
-                    unsafe {
-                        WEB_SERVER_ERROR = Some(error_msg.clone());
-                    }
-                    
-                    // Log multiple times to ensure it's captured
-                    for _ in 0..3 {
-                        esp_idf_hal::delay::FreeRtos::delay_ms(100);
-                        log::error!("WEB SERVER FAILED TO START: {}", e);
-                    }
-                    None
-                }
-            }
+            // Use retry logic for web server startup
+            network::simple_retry::try_start_web_server_with_retries(
+                config.clone(),
+                ota_manager.clone(),
+                true, // network is connected
+                10,   // wait up to 10 seconds
+            )
         } else {
-            log::info!("Skipping web server startup - no network connection");
+            // Try with longer timeout when network isn't ready
+            log::info!("Network not ready, trying web server with wait...");
+            let server = network::simple_retry::try_start_web_server_with_retries(
+                config.clone(),
+                ota_manager.clone(),
+                false, // network not connected yet
+                30,    // wait up to 30 seconds
+            );
+            
+            // Also spawn background retry task
+            if server.is_none() {
+                log::info!("Starting background web server retry task...");
+                network::simple_retry::spawn_web_server_retry_task(
+                    config.clone(),
+                    ota_manager.clone(),
+                );
+            }
+            
+            server
         };

## Alternative simpler change (if you prefer minimal changes):

Just replace the web server creation block (lines 371-393) with:

            // Add retry logic
            let mut server = None;
            for attempt in 1..=3 {
                log::info!("Web server start attempt {}/3", attempt);
                match network::web_server::WebConfigServer::new_with_ota(config.clone(), ota_manager.clone()) {
                    Ok(s) => {
                        log::info!("Web server started successfully on port 80");
                        server = Some(s);
                        break;
                    }
                    Err(e) => {
                        log::error!("Web server start attempt {} failed: {:?}", attempt, e);
                        if attempt < 3 {
                            esp_idf_hal::delay::FreeRtos::delay_ms(2000);
                        }
                    }
                }
            }
            server